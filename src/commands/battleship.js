const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { BattleshipManager } = require('../games/battleship/BattleshipManager');
const { BattleshipButtons } = require('../games/battleship/BattleshipButtons');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('battleship')
    .setDescription('Commandes pour le jeu de Bataille Navale')
    .addSubcommand(subcommand =>
      subcommand
        .setName('start')
        .setDescription('DÃ©marre une nouvelle partie de Bataille Navale')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('join')
        .setDescription('Rejoindre une partie de Bataille Navale')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('rules')
        .setDescription('Affiche les rÃ¨gles du jeu de Bataille Navale')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('cancel')
        .setDescription('Annule la partie de Bataille Navale en cours')
    ),
  async execute(interaction, client) {
    const subcommand = interaction.options.getSubcommand();
    
    // DÃ©finir le client Discord pour toutes les parties
    BattleshipManager.setClient(client);
    
    if (subcommand === 'start') {
      // CrÃ©er une nouvelle partie
      const result = BattleshipManager.createGame(interaction.channelId);
      
      if (!result.success) {
        await interaction.reply({ content: result.message, ephemeral: true });
        return;
      }
      
      // Ajouter le crÃ©ateur Ã  la partie
      const joinResult = BattleshipManager.joinGame(
        interaction.channelId,
        interaction.user.id,
        interaction.user.username
      );
      
      // CrÃ©er un embed pour la nouvelle partie
      const embed = new EmbedBuilder()
        .setColor(0x0099ff)
        .setTitle('ğŸš¢ Nouvelle partie de Bataille Navale')
        .setDescription('Une nouvelle partie de Bataille Navale a Ã©tÃ© crÃ©Ã©e ! Utilisez `/battleship join` pour rejoindre la partie.')
        .addFields(
          {
            name: 'Joueurs',
            value: `1/2 (${interaction.user.username})`
          },
          {
            name: 'Statut',
            value: 'En attente d\'un autre joueur'
          }
        )
        .setTimestamp()
        .setFooter({ text: 'Bataille Navale | Dev by Samzerrr' });
      
      await interaction.reply({ embeds: [embed] });
      
    } else if (subcommand === 'join') {
      // Rejoindre une partie existante
      const result = BattleshipManager.joinGame(
        interaction.channelId,
        interaction.user.id,
        interaction.user.username
      );
      
      if (!result.success) {
        await interaction.reply({ content: result.message, ephemeral: true });
        return;
      }
      
      const game = BattleshipManager.getGame(interaction.channelId);
      const players = Object.values(game.players).map(p => p.username).join(', ');
      
      // CrÃ©er un embed pour rejoindre la partie
      const embed = new EmbedBuilder()
        .setColor(0x0099ff)
        .setTitle('ğŸš¢ Bataille Navale')
        .setDescription(`${interaction.user.username} a rejoint la partie !`)
        .addFields(
          {
            name: 'Joueurs',
            value: `${result.playersCount}/2 (${players})`
          }
        )
        .setTimestamp()
        .setFooter({ text: 'Bataille Navale | Dev by Samzerrr' });
      
      await interaction.reply({ embeds: [embed] });
      
      // Si la partie est complÃ¨te, envoyer un message pour commencer Ã  placer les navires
      if (result.playersCount === 2) {
        const setupEmbed = new EmbedBuilder()
          .setColor(0x00ff00)
          .setTitle('ğŸš¢ Bataille Navale - Placement des navires')
          .setDescription('La partie est prÃªte Ã  commencer ! Chaque joueur doit placer ses navires.')
          .addFields(
            {
              name: 'Navires Ã  placer',
              value: '- 1 Porte-avions (5 cases)\n- 1 CuirassÃ© (4 cases)\n- 1 Croiseur (3 cases)\n- 1 Sous-marin (3 cases)\n- 1 Contre-torpilleur (2 cases)'
            },
            {
              name: 'Commandes',
              value: 'Utilisez `/ship place` sans paramÃ¨tres pour ouvrir l\'interface de placement interactive.'
            }
          )
          .setTimestamp()
          .setFooter({ text: 'Bataille Navale | Dev by Samzerrr' });
        
        await interaction.followUp({ embeds: [setupEmbed] });
        
        // Envoyer des messages Ã  chaque joueur avec leurs grilles (en rÃ©ponse Ã©phÃ©mÃ¨re)
        for (const player of Object.values(game.players)) {
          try {
            // Si c'est le joueur actuel, on peut utiliser l'interaction existante
            if (player.id === interaction.user.id) {
              // RÃ©cupÃ©rer les navires restants Ã  placer
              const remainingShips = game.getRemainingShips(player.id);
              
              // CrÃ©er un embed pour le joueur
              const playerEmbed = new EmbedBuilder()
                .setColor(0x0099FF)
                .setTitle('ğŸš¢ Placement de vos navires')
                .setDescription('SÃ©lectionnez un navire Ã  placer sur votre grille.')
                .addFields(
                  {
                    name: 'Votre grille',
                    value: `\`\`\`\n${game.getPlayerBoard(player.id, true)}\`\`\``
                  },
                  {
                    name: 'Navires Ã  placer',
                    value: formatRemainingShips(remainingShips)
                  }
                )
                .setTimestamp()
                .setFooter({ text: 'Bataille Navale | Dev by Samzerrr' });
                
              // CrÃ©er les boutons pour la sÃ©lection des navires
              const components = BattleshipButtons.createShipSelectionButtons(remainingShips);
              
              await interaction.followUp({ embeds: [playerEmbed], components: components, ephemeral: true });
            } else {
              // Pour l'autre joueur, on envoie un message public pour l'informer
              await interaction.followUp({
                content: `${player.username}, utilisez la commande \`/ship place\` sans paramÃ¨tres pour placer vos navires avec l'interface interactive.`,
                ephemeral: false
              });
            }
          } catch (error) {
            console.error(`Erreur lors de l'envoi du message Ã  ${player.username}:`, error);
          }
        }
      }
      
    } else if (subcommand === 'rules') {
      // Afficher les rÃ¨gles du jeu
      const rulesEmbed = new EmbedBuilder()
        .setColor(0x0099ff)
        .setTitle('ğŸ“œ RÃ¨gles de la Bataille Navale')
        .setDescription('La Bataille Navale est un jeu de stratÃ©gie pour 2 joueurs.')
        .addFields(
          {
            name: 'Objectif',
            value: 'Couler tous les navires adverses avant que l\'adversaire ne coule les vÃ´tres.'
          },
          {
            name: 'Mise en place',
            value: 'Chaque joueur place ses navires sur sa grille 10x10 sans que l\'adversaire ne voie leur position. Les navires ne peuvent pas se toucher, mÃªme en diagonale.'
          },
          {
            name: 'Navires',
            value: '- 1 Porte-avions (5 cases)\n- 1 CuirassÃ© (4 cases)\n- 1 Croiseur (3 cases)\n- 1 Sous-marin (3 cases)\n- 1 Contre-torpilleur (2 cases)'
          },
          {
            name: 'DÃ©roulement',
            value: 'Ã€ tour de rÃ´le, les joueurs tirent sur une case de la grille adverse. Si un navire est touchÃ©, le joueur peut rejouer. La partie se termine quand tous les navires d\'un joueur sont coulÃ©s.'
          },
          {
            name: 'Commandes',
            value: '`/battleship start` - DÃ©marrer une nouvelle partie\n`/battleship join` - Rejoindre une partie\n`/ship place` - Placer un navire avec l\'interface interactive\n`/fire` - Tirer sur une case'
          }
        )
        .setTimestamp()
        .setFooter({ text: 'Bataille Navale | Dev by Samzerrr' });
      
      await interaction.reply({ embeds: [rulesEmbed] });
      
    } else if (subcommand === 'cancel') {
      // Annuler la partie en cours
      const game = BattleshipManager.getGame(interaction.channelId);
      
      if (!game) {
        await interaction.reply({ content: 'Aucune partie en cours dans ce canal.', ephemeral: true });
        return;
      }
      
      // VÃ©rifier si le joueur est dans la partie
      if (!game.hasPlayer(interaction.user.id)) {
        await interaction.reply({ content: 'Vous n\'Ãªtes pas dans cette partie.', ephemeral: true });
        return;
      }
      
      // Annuler la partie
      BattleshipManager.endGame(interaction.channelId);
      
      await interaction.reply('La partie de Bataille Navale a Ã©tÃ© annulÃ©e.');
    }
  },
};

// Fonction pour formater l'affichage des navires restants
function formatRemainingShips(remainingShips) {
  let result = '';
  
  for (const [type, info] of Object.entries(remainingShips)) {
    if (info.remaining > 0) {
      result += `- ${info.name} (${info.size} cases) : ${info.remaining}\n`;
    }
  }
  
  if (result === '') {
    result = 'Tous les navires ont Ã©tÃ© placÃ©s ! Utilisez `/ship ready` pour vous dÃ©clarer prÃªt.';
  }
  
  return result;
} 