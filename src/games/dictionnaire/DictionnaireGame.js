const fs = require('fs');
const path = require('path');
const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

class DictionnaireGame {
    constructor() {
        this.games = new Map();
        this.loadWords();
    }

    loadWords() {
        try {
            const filePath = path.join(__dirname, 'mots_rares.json');
            if (fs.existsSync(filePath)) {
                const data = fs.readFileSync(filePath, 'utf8');
                this.words = JSON.parse(data);
            } else {
                // Mots rares avec leurs vraies d√©finitions
                this.words = [
                    { mot: "Acrimonie", definition: "Aigreur, amertume dans les propos, les √©crits ou le caract√®re." },
                    { mot: "Callipyge", definition: "Qui a de belles fesses." },
                    { mot: "√âpistolaire", definition: "Qui a rapport aux lettres, √† la correspondance par lettres." },
                    { mot: "Faconde", definition: "Abondance de paroles, √©loquence facile et bavarde." },
                    { mot: "Goguenard", definition: "Qui aime plaisanter, railler de fa√ßon narquoise." },
                    { mot: "Histrion", definition: "Com√©dien, bouffon, saltimbanque dans l'Antiquit√© romaine." },
                    { mot: "Ineffable", definition: "Qui ne peut √™tre exprim√© par des paroles." },
                    { mot: "Jactance", definition: "Bavardage pr√©somptueux, vantardise." },
                    { mot: "Logorrh√©e", definition: "Flux de paroles inutiles et incoh√©rentes." },
                    { mot: "M√©phitique", definition: "Qui exhale une odeur d√©sagr√©able, naus√©abonde." }
                ];
                fs.writeFileSync(filePath, JSON.stringify(this.words, null, 2), 'utf8');
            }
        } catch (error) {
            console.error("Erreur lors du chargement des mots:", error);
            this.words = [];
        }
    }

    // G√©n√®re une fausse d√©finition pour un mot
    generateFakeDefinition(realDefinition) {
        const fakeDefinitions = [
            "Outil utilis√© dans l'agriculture m√©di√©vale pour le battage des c√©r√©ales.",
            "Maladie rare affectant principalement le syst√®me respiratoire.",
            "Technique de peinture originaire d'Italie utilisant des pigments naturels.",
            "Ph√©nom√®ne astronomique li√© √† l'alignement de certaines plan√®tes.",
            "Instrument de musique √† cordes utilis√© dans la musique traditionnelle nordique.",
            "C√©r√©monie rituelle pratiqu√©e dans certaines tribus d'Amazonie.",
            "Concept philosophique d√©velopp√© au XVIIIe si√®cle sur la perception du temps.",
            "Petit mammif√®re nocturne vivant dans les r√©gions montagneuses d'Asie.",
            "Technique de navigation utilis√©e par les explorateurs polyn√©siens.",
            "M√©thode de conservation des aliments pratiqu√©e dans les r√©gions arctiques."
        ];
        
        // S√©lectionne une d√©finition al√©atoire diff√©rente de la vraie d√©finition
        let fakeDefinition;
        do {
            fakeDefinition = fakeDefinitions[Math.floor(Math.random() * fakeDefinitions.length)];
        } while (fakeDefinition === realDefinition);
        
        return fakeDefinition;
    }

    startGame(channelId, interaction) {
        // S√©lectionne un mot al√©atoire
        const randomWord = this.words[Math.floor(Math.random() * this.words.length)];
        const isRealDefinition = Math.random() > 0.5; // 50% de chance d'utiliser la vraie d√©finition
        
        const definition = isRealDefinition 
            ? randomWord.definition 
            : this.generateFakeDefinition(randomWord.definition);
        
        // Cr√©e un embed pour afficher le mot et sa d√©finition
        const embed = new EmbedBuilder()
            .setTitle(`üîç Jeu du Dictionnaire`)
            .setDescription(`**Mot: ${randomWord.mot}**\n\n**D√©finition propos√©e:**\n${definition}`)
            .setColor('#3498db')
            .addFields(
                { name: 'Instructions', value: 'Cette d√©finition est-elle vraie ou fausse? Votez avec les boutons ci-dessous.' }
            )
            .setFooter({ text: 'Vous avez 30 secondes pour voter!' });
        
        // Cr√©e les boutons pour voter
        const trueButton = new ButtonBuilder()
            .setCustomId('dictionnaire_true')
            .setLabel('Vraie')
            .setStyle(ButtonStyle.Success);
        
        const falseButton = new ButtonBuilder()
            .setCustomId('dictionnaire_false')
            .setLabel('Fausse')
            .setStyle(ButtonStyle.Danger);
        
        const row = new ActionRowBuilder().addComponents(trueButton, falseButton);
        
        // Enregistre les informations du jeu
        this.games.set(channelId, {
            word: randomWord.mot,
            realDefinition: randomWord.definition,
            shownDefinition: definition,
            isRealDefinition: isRealDefinition,
            votes: {
                true: [],
                false: []
            },
            messageId: null,
            timeout: null
        });
        
        // Envoie le message et enregistre son ID
        interaction.reply({ embeds: [embed], components: [row] })
            .then(message => {
                const game = this.games.get(channelId);
                if (game) {
                    game.messageId = interaction.id;
                    
                    // Configure un timeout pour terminer le jeu apr√®s 30 secondes
                    game.timeout = setTimeout(() => {
                        this.endGame(channelId, interaction);
                    }, 30000);
                }
            });
    }
    
    handleVote(interaction, isTrue) {
        const channelId = interaction.channelId;
        const userId = interaction.user.id;
        const game = this.games.get(channelId);
        
        if (!game) {
            interaction.reply({ content: "Aucun jeu en cours dans ce canal.", ephemeral: true });
            return;
        }
        
        // V√©rifie si l'utilisateur a d√©j√† vot√©
        if (game.votes.true.includes(userId) || game.votes.false.includes(userId)) {
            interaction.reply({ content: "Vous avez d√©j√† vot√©!", ephemeral: true });
            return;
        }
        
        // Enregistre le vote
        if (isTrue) {
            game.votes.true.push(userId);
        } else {
            game.votes.false.push(userId);
        }
        
        interaction.reply({ content: `Votre vote a √©t√© enregistr√©!`, ephemeral: true });
    }
    
    endGame(channelId, interaction) {
        const game = this.games.get(channelId);
        if (!game) return;
        
        // Annule le timeout si le jeu se termine avant
        if (game.timeout) {
            clearTimeout(game.timeout);
        }
        
        // Calcule les r√©sultats
        const trueVotes = game.votes.true.length;
        const falseVotes = game.votes.false.length;
        const totalVotes = trueVotes + falseVotes;
        
        // D√©termine qui a gagn√©
        const correctAnswer = game.isRealDefinition ? 'true' : 'false';
        const truePercentage = totalVotes > 0 ? Math.round((trueVotes / totalVotes) * 100) : 0;
        const falsePercentage = totalVotes > 0 ? Math.round((falseVotes / totalVotes) * 100) : 0;
        
        // Cr√©e un embed pour afficher les r√©sultats
        const embed = new EmbedBuilder()
            .setTitle(`üîç R√©sultats - Jeu du Dictionnaire`)
            .setDescription(`**Mot: ${game.word}**\n\n**D√©finition propos√©e:**\n${game.shownDefinition}`)
            .setColor(game.isRealDefinition ? '#2ecc71' : '#e74c3c')
            .addFields(
                { name: 'R√©sultat', value: game.isRealDefinition ? '‚úÖ La d√©finition √©tait **VRAIE**!' : '‚ùå La d√©finition √©tait **FAUSSE**!' },
                { name: 'Vraie d√©finition', value: game.realDefinition },
                { name: 'Votes', value: `‚úÖ Vraie: ${trueVotes} (${truePercentage}%)\n‚ùå Fausse: ${falseVotes} (${falsePercentage}%)` }
            )
            .setFooter({ text: `Total des votes: ${totalVotes}` });
        
        // Met √† jour le message original avec les r√©sultats
        interaction.editReply({ embeds: [embed], components: [] });
        
        // Supprime le jeu de la map
        this.games.delete(channelId);
    }
}

module.exports = new DictionnaireGame(); 